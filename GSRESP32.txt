#include <WiFi.h>
#include <WebServer.h>
#include <LittleFS.h>
#include <esp_wifi.h>
#include <esp_netif.h>
#include <lwip/sockets.h>
#include <LiquidCrystal.h>  // Librería estándar para LCD

const char* ssid = "Luisifer_2.4Gnormal";
const char* password = "cradleoffilth21";

WebServer server(80);
const int GSR = 32;

// Configuración de pines para la LCD (ajusta según tu conexión)
const int rs = 12, en = 14, d4 = 27, d5 = 26, d6 = 25, d7 = 33;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

String sensorReading() {
  long sum = 0;
  for (int i = 0; i < 10; i++) {
    int sensorValue = analogRead(GSR);
    if (sensorValue == 0 || sensorValue == 4095) {
      Serial.println("Error lectura sensor");
      return "ERROR";
    }
    sum += sensorValue;
    delay(5);
  }
  int gsr_average = sum / 10;

  // Mostrar en LCD según el rango
  displayStressLevel(gsr_average);

  Serial.println(gsr_average);
  return String(gsr_average);
}

void displayStressLevel(int value) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("GSR:");
  lcd.print(value);
  lcd.print("  ");  // Limpia caracteres residuales

  lcd.setCursor(0, 1);
  String estado;
  if (value >= 60 && value < 100) estado = "Relajacion";
  else if (value < 300) estado = "Estado neutro";
  else if (value < 500) estado = "Estres leve";
  else if (value < 700) estado = "Estres alto";
  else if (value <= 1023) estado = "Dolor";
  else estado = "Fuera rango";

  lcd.print(estado);
  // Rellena con espacios para borrar texto previo
  for (int i = estado.length(); i < 16; i++) lcd.print(" ");
}

void handleRoot() {
  if (LittleFS.exists("/index.html")) {
    File file = LittleFS.open("/index.html", "r");
    server.streamFile(file, "text/html");
    file.close();
  } else {
    server.send(200, "text/plain", "Archivo index.html no encontrado");
  }
}

void handleHumanResistance() {
  server.send(200, "text/plain", sensorReading());
}

void handleNotFound() {
  server.send(404, "text/plain", "Endpoint no encontrado");
}

void setup() {
  Serial.begin(115200);

  // Inicializar LCD (16 columnas, 2 filas)
  lcd.begin(16, 2);
  lcd.clear();
  lcd.print("Iniciando...");
  delay(1000);

  Serial.println("\nIniciando...");

  // Configuración crítica del stack de red
  esp_netif_init();
  esp_wifi_set_ps(WIFI_PS_NONE);
  WiFi.setSleep(false);

  // Inicializa LittleFS
  if (!LittleFS.begin()) {
    Serial.println("Error con LittleFS");
    lcd.clear();
    lcd.print("Error LittleFS");
    while (1) delay(1000);
  }

  // Conexión WiFi con timeout
  WiFi.begin(ssid, password);
  Serial.print("Conectando WiFi");
  lcd.clear();
  lcd.print("Conectando WiFi");

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 30000) {
    delay(500);
    Serial.print(".");
    static int dots = 0;
    lcd.setCursor(13, 0);
    lcd.print("   ");
    lcd.setCursor(13 + (dots % 3), 0);
    lcd.print(".");
    dots++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi conectado! IP: " + WiFi.localIP().toString());
    lcd.clear();
    lcd.print("WiFi conectado");
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP());
    delay(2000);

    // Configuración de endpoints
    server.on("/", handleRoot);
    server.on("/humanResistance", handleHumanResistance);
    server.onNotFound(handleNotFound);

    server.begin();
    Serial.println("Servidor HTTP iniciado");
    lcd.clear();
    lcd.print("Servidor listo");
    delay(1000);
  } else {
    Serial.println("\nFalló la conexión WiFi. Reiniciando...");
    lcd.clear();
    lcd.print("Error WiFi");
    lcd.setCursor(0, 1);
    lcd.print("Reiniciando...");
    delay(2000);
    ESP.restart();
  }
}

void loop() {
  server.handleClient();  // Maneja las peticiones HTTP

  // Verificación periódica de WiFi
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck > 10000) {
    lastCheck = millis();
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi desconectado. Reconectando...");
      lcd.clear();
      lcd.print("WiFi desconectado");
      lcd.setCursor(0, 1);
      lcd.print("Reconectando...");
      WiFi.reconnect();
    }
  }
  delay(50);  // Pequeña pausa para liberar CPU
}